<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qso Blog</title>
  <subtitle>每天学一点，每天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qsoblog.gq/"/>
  <updated>2017-06-21T04:39:32.000Z</updated>
  <id>https://qsoblog.gq/</id>
  
  <author>
    <name>QSO.MR</name>
    <email>theg1229@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Node.js] 网页爬虫——实战（一）</title>
    <link href="https://qsoblog.gq/2017/06/20/post-6/"/>
    <id>https://qsoblog.gq/2017/06/20/post-6/</id>
    <published>2017-06-20T14:15:58.000Z</published>
    <updated>2017-06-21T04:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<hr>
<p>忙碌了几周以后偷得浮生半日闲，天真的我以为到了大三下学期课程应该会少一点吧，然而课多的想学一些新东西都没有足够的精力和时间。前端的知识已经放下好久没有动了，而且作为一个研狗意味着我需要放弃一些东西。但是不管怎样做自己喜欢的事情最重要。</p>
<h1 id="nodejs的介绍">Node.js的介绍</h1>
<hr>
<p>Node.js是什么?官方是这样解释的：</p>
<blockquote>
<p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</p>
</blockquote>
<p>翻译过来就是：Node.js 是一个基于<code>Chrome V8</code> JavaScript引擎的JavaScript运行环境。Node.js使用事件驱动的非阻塞I / O模型，使其轻便且高效。 Node.js的包生态系统，<code>npm</code>，是世界上最大的开源图书馆生态系统。</p>
<p>根据我对Node.js的理解，它有如下几个特征：</p>
<ul>
<li>Nodejs是个可以运行在服务器端的一个js运行环境。</li>
<li>基于Chrome V8，对于js解析的速度非常快。</li>
<li>单进程，单线程，只支持单核CPU，不能充分的利用多核CPU服务器。</li>
<li>事件驱动与非阻塞的I/O，对高并发处理能力强。</li>
</ul>
<h1 id="nodejs的安装">Node.js的安装</h1>
<hr>
<p>Node.js的兼容性非常的强，Windows、Linux、Mac都可以安装。所以这也是它迅速在前端世界里迅速流行的一个重要因素。</p>
<h2 id="windows安装nodejs">Windows安装Node.js</h2>
<hr>
<p>进人<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs</a>官网,它已经自动为我们选择好对应系统的Node.js的两个版本：</p>
<p>Download for Windows (x64)</p>
<ul>
<li>V6.11.0 LTS Recommended For Most Users</li>
<li>V8.1.2 Current Latest Features</li>
</ul>
<p>我个人觉得使用V6.11.0 LTS的长期更新版本就可以了，但是如果你喜欢尝鲜也可以使用最新版本。这两个都是msi格式的文件，下载后可以傻瓜式地安装，并且会自动地将系统的环境变量PATH写好，以及装上相应版本的NPM（nodejs的插件包管理工具）。</p>
<h2 id="linux安装nodejs">Linux安装Node.js</h2>
<hr>
<p>因为我使用的是Ubuntu16.04（Yakkety）所以以下安装方法是基于Ubuntu系统而写。其他系统请自行百度</p>
<p>我们需要依次运行以下命令安装Node.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y python-software-properties</div><div class="line">curl <span class="_">-s</span>L https://deb.nodesource.com/setup_6.x | sudo -E bash –</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure>
<p>安装好后可以用<code>node -v</code>和<code>npm -v</code>检查一下是否安装成功</p>
<h1 id="nodejs爬虫小试牛刀">Node.js爬虫小试牛刀</h1>
<hr>
<p>一个简单的网页爬虫需要以下的几个步骤和模块：</p>
<ul>
<li>获取网页内容（http\request\superagent等）</li>
<li>筛选网页信息（cheerio）</li>
<li>输出或存储信息（console\fs\mongodb等）</li>
</ul>
<h2 id="http模块分析">http模块分析</h2>
<hr>
<p>我觉得要对http模块进行系统学习的最好办法就是阅读<a href="http://nodejs.cn/api/http.html" target="_blank" rel="external">官方文档</a>，有个大概的印象后以后学习就容易多了。</p>
<p>我们这次用的是http.get(options[, callback])类。根据官方文档的介绍：</p>
<ul>
<li>options <object> | <string> | <url> Accepts the same options as http.request(), with the method always set to GET. Properties that are inherited from the prototype are ignored.</url></string></object></li>
<li>callback <function></function></li>
<li>返回: &lt;http.ClientRequest&gt;</li>
</ul>
<blockquote>
<p>options 可以是一个对象、或字符串、或 URL 对象。 如果 options 是一个字符串，它会被自动使用 url.parse() 解析。 If it is a URL object, it will be automatically converted to an ordinary options object.<br>
可选的 callback 参数会作为单次监听器被添加到 ‘response’ 事件。<br>
http.request() 返回一个 http.ClientRequest 类的实例。 ClientRequest 实例是一个可写流。 如果需要通过 POST 请求上传一个文件，则写入到 ClientRequest 对象。</p>
</blockquote>
<p>一个例子：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="string">const</span> <span class="string">postData</span> <span class="string">=</span> <span class="string">querystring.stringify(&#123;</span></div><div class="line">  <span class="string">'msg'</span> <span class="string">:</span> <span class="string">'Hello World!'</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"></div><div class="line"><span class="string">const</span> <span class="string">options</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">  hostname:</span> <span class="string">'www.google.com'</span><span class="string">,</span></div><div class="line"><span class="attr">  port:</span> <span class="number">80</span><span class="string">,</span></div><div class="line"><span class="attr">  path:</span> <span class="string">'/upload'</span><span class="string">,</span></div><div class="line"><span class="attr">  method:</span> <span class="string">'POST'</span><span class="string">,</span></div><div class="line"><span class="attr">  headers:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    'Content-Type':</span> <span class="string">'application/x-www-form-urlencoded'</span><span class="string">,</span></div><div class="line"><span class="attr">    'Content-Length':</span> <span class="string">Buffer.byteLength(postData)</span></div><div class="line">  <span class="string">&#125;</span></div><div class="line"><span class="string">&#125;;</span></div><div class="line"></div><div class="line"><span class="string">const</span> <span class="string">req</span> <span class="string">=</span> <span class="string">http.request(options,</span> <span class="string">(res)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></div><div class="line">  <span class="string">console.log(`状态码:</span> <span class="string">$&#123;res.statusCode&#125;`);</span></div><div class="line">  <span class="string">console.log(`响应头:</span> <span class="string">$&#123;JSON.stringify(res.headers)&#125;`);</span></div><div class="line">  <span class="string">res.setEncoding('utf8');</span></div><div class="line">  <span class="string">res.on('data',</span> <span class="string">(chunk)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">console.log(`响应主体:</span> <span class="string">$&#123;chunk&#125;`);</span></div><div class="line">  <span class="string">&#125;);</span></div><div class="line">  <span class="string">res.on('end',</span> <span class="string">()</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">console.log('响应中已无数据。');</span></div><div class="line">  <span class="string">&#125;);</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"></div><div class="line"><span class="string">req.on('error',</span> <span class="string">(e)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></div><div class="line">  <span class="string">console.error(`请求遇到问题:</span> <span class="string">$&#123;e.message&#125;`);</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"></div><div class="line"><span class="string">//</span> <span class="string">写入数据到请求主体</span></div><div class="line"><span class="string">req.write(postData);</span></div><div class="line"><span class="string">req.end();</span></div></pre></td></tr></table></figure>
<p>注意，在例子中调用了 req.end()。 使用 http.request() 必须总是调用 req.end() 来表明请求的结束，即使没有数据被写入请求主体。如果请求过程中遇到任何错误（DNS 解析错误、TCP 级的错误、或实际的 HTTP 解析错误），则在返回的请求对象中会触发 ‘error’ 事件。 对于所有的’error’ 事件，如果没有注册监听器，则抛出错误。</p>
<p>以下是需要注意的几个特殊的请求头。</p>
<ul>
<li>发送 ‘Connection: keep-alive’ 会通知 Node.js，服务器的连接应一直持续到下一个请求。</li>
<li>发送 ‘Content-Length’ 请求头会禁用默认的块编码。</li>
<li>发送 ‘Expect’ 请求头会立即发送请求头。 通常情况下，当发送 ‘Expect: 100-continue’ 时，超时时间与 continue 事件的监听器都需要被设置。</li>
<li>发送 Authorization 请求头会替代 auth 选项计算基本身份验证。</li>
</ul>
<h2 id="cheerio模块分析">cheerio模块分析</h2>
<hr>
<p>简单来说，cheerio就是服务器端的jQuery，去掉了jQuery的一些效果类和请求类等等功能后，仅保留核心对dom操作的部分，因此能够对dom进行和jQuery一样方便的操作。它是我们筛选数据的利器——把多余的html标签去掉，只留下我们想要的内容的重要工具。<br>
cheerio的类特别多，这里我只介绍几个常用的。</p>
<h3 id="attrname-value">.attr(name[, value])</h3>
<hr>
<blockquote>
<p>这个方法可以获取和设置属性，第二个参数是可选的。<br>
当第二个参数不存在时表示获取属性的值，当有带有第二个参数时，表示设置属性的值。<br>
如果设置一个属性的值设置为null ，则删除该属性。如下示例</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">html</span> <span class="string">=</span> <span class="string">'&lt;ul id="fruits"&gt;'</span> <span class="string">+</span></div><div class="line">    <span class="string">'   &lt;li class="apple"&gt;Apple&lt;/li&gt;'</span> <span class="string">+</span></div><div class="line">    <span class="string">'   &lt;li class="orange"&gt;Orange&lt;/li&gt;'</span> <span class="string">+</span></div><div class="line">    <span class="string">'   &lt;li class="pear"&gt;Pear&lt;/li&gt;'</span> <span class="string">+</span></div><div class="line">    <span class="string">'&lt;/ul&gt;'</span><span class="string">;</span></div><div class="line"><span class="string">var</span> <span class="string">cheerio</span> <span class="string">=</span> <span class="string">require('cheerio'),</span></div><div class="line"><span class="string">$</span> <span class="string">=</span> <span class="string">cheerio.load(html);</span></div><div class="line"></div><div class="line"><span class="string">$('ul').attr('id')</span></div><div class="line"><span class="string">&gt;=&gt;</span> <span class="string">fruits</span></div><div class="line"> </div><div class="line"><span class="string">$('.apple').attr('id',</span> <span class="string">'favorite'</span><span class="string">).html()</span></div><div class="line"><span class="string">&gt;=&gt;</span> <span class="string">&lt;li</span> <span class="string">class="apple"</span> <span class="string">id="favorite"&gt;Apple&lt;/li&gt;</span></div></pre></td></tr></table></figure>
<h3 id="mapfunctionindex-element">.map(function(index, element){…})</h3>
<hr>
<blockquote>
<p>和jquery类似的 each 迭代器，对每一个元素进行处理并返回一个值。</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">$('li').map(function(i,</span> <span class="string">el)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">//</span> <span class="string">this</span> <span class="string">===</span> <span class="string">el</span></div><div class="line">    <span class="string">return</span> <span class="string">$(this).attr('class');</span></div><div class="line"><span class="string">&#125;).get().join(',</span> <span class="string">'); //=&gt; apple, orange, pear</span></div></pre></td></tr></table></figure>
<h3 id="findselector">.find(selector)</h3>
<hr>
<blockquote>
<p>在某元素下查询满足选择条件的元素。</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">$('#fruits').find('li').length;</span></div><div class="line"><span class="string">//=&gt;</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="npm模块">npm模块</h2>
<hr>
<p>实现效果：爬取盐城工学院官网学校<a href="http://www.ycit.cn/sjzjxjs/listhtml/schoolimportnews.shtml" target="_blank" rel="external">新闻版块</a>的文章标题和原文链接，并将其输出。</p>
<p>没有金刚钻，不揽瓷器活。我们需要引入以下几个模块</p>
<ul>
<li>http</li>
<li>cheerio</li>
</ul>
<p>在工作文件夹里输入’npm install cheerio sync-request --save’这样模块救引入好了。</p>
<h2 id="代码">代码</h2>
<hr>
<p>在程序开头引入模块：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">http</span> <span class="string">=</span> <span class="string">require('http');</span></div><div class="line"><span class="string">var</span> <span class="string">cheerio</span> <span class="string">=</span> <span class="string">require</span> <span class="string">('cheerio');</span></div><div class="line"><span class="string">var</span> <span class="string">url</span> <span class="string">=</span> <span class="string">'http://www.ycit.cn/sjzjxjs/listhtml/schoolimportnews.shtml'</span><span class="string">;</span></div></pre></td></tr></table></figure>
<p>接着就是获取网页内容</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">http.get(url,</span> <span class="string">function(res)</span> <span class="string">&#123;</span></div><div class="line">  <span class="string">var</span> <span class="string">html</span> <span class="string">=</span> <span class="string">''</span><span class="string">;</span></div><div class="line"></div><div class="line">  <span class="string">res.on('data',</span> <span class="string">function(data)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">html</span> <span class="string">+=</span> <span class="string">data;</span></div><div class="line">  <span class="string">&#125;)</span></div><div class="line"></div><div class="line">  <span class="string">res.on('end',</span> <span class="string">function()</span> <span class="string">&#123;</span></div><div class="line">     <span class="string">console.log(html);</span></div><div class="line">  <span class="string">&#125;)</span></div><div class="line"><span class="string">&#125;).on('error',</span> <span class="string">function()&#123;</span></div><div class="line">  <span class="string">console.log('err');</span></div><div class="line"><span class="string">&#125;)</span></div></pre></td></tr></table></figure>
<p>然后就是用cheerio分析网页内容</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="string">function</span> <span class="string">crawlerChapter(html)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">var</span> <span class="string">$</span> <span class="string">=</span> <span class="string">cheerio.load(html);</span></div><div class="line">    <span class="string">var</span> <span class="string">chapters</span> <span class="string">=</span> <span class="string">$('tr');</span></div><div class="line">    <span class="string">var</span> <span class="string">data</span> <span class="string">=</span> <span class="string">[];</span></div><div class="line"> </div><div class="line">    <span class="string">chapters.map(function</span> <span class="string">(node)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">var</span> <span class="string">chapters</span> <span class="string">=</span> <span class="string">$(this);</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterTitle</span> <span class="string">=</span> <span class="string">chapters.find('a').text().trim()+'\n';</span></div><div class="line">        <span class="string">var</span> <span class="string">sections</span> <span class="string">=</span> <span class="string">chapters.find('a');</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterData</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">            chapterTitle:</span> <span class="string">chapterTitle,</span></div><div class="line"><span class="attr">            section:</span> <span class="string">[]</span></div><div class="line">        <span class="string">&#125;;</span></div><div class="line">        <span class="string">sections.map(function</span> <span class="string">(node)</span> <span class="string">&#123;</span></div><div class="line">            <span class="string">var</span> <span class="string">url</span> <span class="string">=</span> <span class="string">require('url')</span></div><div class="line">            <span class="string">var</span> <span class="string">section</span> <span class="string">=</span> <span class="string">url.resolve('http://www.ycit.cn',$(this).attr('href'));</span></div><div class="line">            <span class="string">chapterData.section.push(section);</span></div><div class="line">        <span class="string">&#125;);</span></div><div class="line">        <span class="string">data.push(chapterData);</span></div><div class="line">    <span class="string">&#125;);</span></div><div class="line">    <span class="string">return</span> <span class="string">data;</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure>
<p>最后就是输出信息了。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">function</span> <span class="string">printInfo(data)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">data</span> <span class="string">=</span> <span class="string">data.filter(function</span> <span class="string">filterByID(obj)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">return</span> <span class="string">obj.chapterTitle</span> <span class="string">?</span> <span class="literal">true</span> <span class="string">:</span> <span class="literal">false</span><span class="string">;</span></div><div class="line">    <span class="string">&#125;);</span></div><div class="line">    <span class="string">data.map(function</span> <span class="string">(item)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterTitle</span> <span class="string">=</span> <span class="string">item.chapterTitle;</span></div><div class="line">        <span class="string">console.log(chapterTitle);</span></div><div class="line">        <span class="string">item.section.map(function</span> <span class="string">(section)</span> <span class="string">&#123;</span></div><div class="line">            <span class="string">console.log(section);</span></div><div class="line">        <span class="string">&#125;);</span></div><div class="line">    <span class="string">&#125;)</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure>
<p>整个代码如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">http</span> <span class="string">=</span> <span class="string">require('http');</span></div><div class="line"><span class="string">var</span> <span class="string">cheerio</span> <span class="string">=</span> <span class="string">require</span> <span class="string">('cheerio');</span></div><div class="line"><span class="string">var</span> <span class="string">url</span> <span class="string">=</span> <span class="string">'http://www.ycit.cn/sjzjxjs/listhtml/schoolimportnews.shtml'</span><span class="string">;</span></div><div class="line"></div><div class="line"><span class="string">http.get(url,</span> <span class="string">function(res)</span> <span class="string">&#123;</span></div><div class="line">  <span class="string">var</span> <span class="string">html</span> <span class="string">=</span> <span class="string">''</span><span class="string">;</span></div><div class="line"></div><div class="line">  <span class="string">res.on('data',</span> <span class="string">function(data)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">html</span> <span class="string">+=</span> <span class="string">data;</span></div><div class="line">  <span class="string">&#125;)</span></div><div class="line"></div><div class="line">  <span class="string">res.on('end',</span> <span class="string">function()</span> <span class="string">&#123;</span></div><div class="line">     <span class="string">var</span> <span class="string">chapter</span> <span class="string">=</span> <span class="string">crawlerChapter(html);</span></div><div class="line">     <span class="string">printInfo(chapter);</span></div><div class="line">  <span class="string">&#125;)</span></div><div class="line"><span class="string">&#125;).on('error',</span> <span class="string">function()&#123;</span></div><div class="line">  <span class="string">console.log('err');</span></div><div class="line"><span class="string">&#125;)</span></div><div class="line"></div><div class="line"><span class="string">function</span> <span class="string">crawlerChapter(html)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">var</span> <span class="string">$</span> <span class="string">=</span> <span class="string">cheerio.load(html);</span></div><div class="line">    <span class="string">var</span> <span class="string">chapters</span> <span class="string">=</span> <span class="string">$('tr');</span></div><div class="line">    <span class="string">var</span> <span class="string">data</span> <span class="string">=</span> <span class="string">[];</span></div><div class="line"> </div><div class="line">    <span class="string">chapters.map(function</span> <span class="string">(node)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">var</span> <span class="string">chapters</span> <span class="string">=</span> <span class="string">$(this);</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterTitle</span> <span class="string">=</span> <span class="string">chapters.find('a').text().trim()+'\n';</span></div><div class="line">        <span class="string">var</span> <span class="string">sections</span> <span class="string">=</span> <span class="string">chapters.find('a');</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterData</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">            chapterTitle:</span> <span class="string">chapterTitle,</span></div><div class="line"><span class="attr">            section:</span> <span class="string">[]</span></div><div class="line">        <span class="string">&#125;;</span></div><div class="line">        <span class="string">sections.map(function</span> <span class="string">(node)</span> <span class="string">&#123;</span></div><div class="line">            <span class="string">var</span> <span class="string">url</span> <span class="string">=</span> <span class="string">require('url')</span></div><div class="line">            <span class="string">var</span> <span class="string">section</span> <span class="string">=</span> <span class="string">url.resolve('http://www.ycit.cn',$(this).attr('href'));</span></div><div class="line">            <span class="string">chapterData.section.push(section);</span></div><div class="line">        <span class="string">&#125;);</span></div><div class="line">        <span class="string">data.push(chapterData);</span></div><div class="line">    <span class="string">&#125;);</span></div><div class="line">    <span class="string">return</span> <span class="string">data;</span></div><div class="line"><span class="string">&#125;;</span></div><div class="line"></div><div class="line"><span class="string">function</span> <span class="string">printInfo(data)</span> <span class="string">&#123;</span></div><div class="line">    <span class="string">data</span> <span class="string">=</span> <span class="string">data.filter(function</span> <span class="string">filterByID(obj)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">return</span> <span class="string">obj.chapterTitle</span> <span class="string">?</span> <span class="literal">true</span> <span class="string">:</span> <span class="literal">false</span><span class="string">;</span></div><div class="line">    <span class="string">&#125;);</span></div><div class="line">    <span class="string">data.map(function</span> <span class="string">(item)</span> <span class="string">&#123;</span></div><div class="line">        <span class="string">var</span> <span class="string">chapterTitle</span> <span class="string">=</span> <span class="string">item.chapterTitle;</span></div><div class="line">        <span class="string">console.log(chapterTitle);</span></div><div class="line">        <span class="string">item.section.map(function</span> <span class="string">(section)</span> <span class="string">&#123;</span></div><div class="line">            <span class="string">console.log(section);</span></div><div class="line">        <span class="string">&#125;);</span></div><div class="line">    <span class="string">&#125;)</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure>
<p>附上该爬虫的运行结果<br>
<img src="crawler.png" alt="crawler"><br>
这个爬虫已发布到我的<a href="https://github.com/QSOMR/crawler" target="_blank" rel="external">github</a>上。</p>
<h1 id="写在最后">写在最后</h1>
<hr>
<p>对于这个爬虫的扩展方向</p>
<ul>
<li>爬取单个文章页面的内容</li>
<li>将爬取的内容用bootstrap输出成html文件</li>
</ul>
<p>接下来就会向着这两个方向进行扩展完善。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;忙碌了几周以后偷得浮生半日闲，天真的我以为到了大三下学期课程应该会少一点吧，然而课多的想学一些新东西都没有足够的精力和时间。前端的知识已经放下好久没有动了，而且作为一个研狗意味着我需要放弃一些东西。但是不管怎样做自己喜欢的事
    
    </summary>
    
    
      <category term="Node.js" scheme="https://qsoblog.gq/tags/Node-js/"/>
    
      <category term="cheerio" scheme="https://qsoblog.gq/tags/cheerio/"/>
    
  </entry>
  
  <entry>
    <title>水一篇:记一次课程设计</title>
    <link href="https://qsoblog.gq/2017/05/30/post-5/"/>
    <id>https://qsoblog.gq/2017/05/30/post-5/</id>
    <published>2017-05-30T04:31:27.000Z</published>
    <updated>2017-06-20T13:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手别再颤抖">#手别再颤抖</h2>
<p>五月份是考试周，加上又有持续四周的课程设计。所以这个月都没有时间更新博客，恰逢端午节放假，就好好利用这个假期写写博客。<br>
<img src="quyuan.jpg" alt="屈原"></p>
<p>这次的课程设计需要我们自己动手焊板子。对于像我这样的手残党而言，焊板子是个技术活。每当我用用烙铁头靠近管脚时，我都会想到一句歌词</p>
<blockquote>
<p>手别再颤抖 别再梦游<br>
<br><br></p><p align="right">——歌名是《吻你时别再躲》</p>
</blockquote>
<iframe width="854" height="480" src="https://www.youtube.com/embed/oknMWGH6Df4" frameborder="0" allowfullscreen></iframe>
<h2 id="白银祭司">#白银祭司</h2>
<p>我每做一个东西习惯性地都会为它起个名字，这样就会促使我将它做到完美。这次的板子也不例外，我为它取名为白银祭司，原谅我取了这么一个中二的名字，至于为什么要取这个名字呢，我来一组图你感受一下。<br>
<img src="project.jpg" alt="组图1"><br>
别人做的板子都用的皮包线，而我用的都是裸线，满满的银色看起来是不是一种视觉享受呢。但是这样做就会带来一问题那就是两个裸线很有可能会触碰在一起这样就会带来短路等问题。为了避免这种问题我开了一个脑洞给两个相交线来了个“空中架桥”。真佩服我的机智。感觉板子快被我玩坏了。</p>
<h2 id="学习感悟">#学习感悟</h2>
<p>虽然，我们这学期学习了单片机这门课，也看了许多单片机程序实例。但是通过这次课程设计才发现只有动手才会学到更多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;手别再颤抖&quot;&gt;#手别再颤抖&lt;/h2&gt;
&lt;p&gt;五月份是考试周，加上又有持续四周的课程设计。所以这个月都没有时间更新博客，恰逢端午节放假，就好好利用这个假期写写博客。&lt;br&gt;
&lt;img src=&quot;quyuan.jpg&quot; alt=&quot;屈原&quot;&gt;&lt;/p&gt;
&lt;p&gt;这次的课程设计
    
    </summary>
    
    
      <category term="闲言碎语" scheme="https://qsoblog.gq/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://qsoblog.gq/2017/05/10/post-4/"/>
    <id>https://qsoblog.gq/2017/05/10/post-4/</id>
    <published>2017-05-10T15:17:57.000Z</published>
    <updated>2017-06-20T13:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Life is a box of chocalate, you don‘t know what you are gonna get.</p>
</blockquote>
<p><img src="macaroon.jpg" alt="马卡龙"></p>
<h2 id="生活就像一盒巧克力">#生活就像一盒巧克力</h2>
<p>Life is a box of chocalate, you don‘t know what you are gonna get.这是《阿甘正传》中阿甘妈妈的一句台词非常的有哲理。它的大意是：生活就像一盒巧克力，你永远不知道下一个会是什么味道。</p>
<p>人生也是，你不知道明天，甚至是下一分钟，你的人生将发生什么改变。有时候生活就是爱开玩笑，当你已经为自己的人生做好规划时他总是在背后给你一个措手不及，比如突如其来的疾病，一场糟糕的考试，一次无聊的争吵。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5231510&auto=1&height=66"></iframe>
<h2 id="虚度的光阴">#虚度的光阴</h2>
<p>回想起那时刚踏入大学大门的我，还在幻想这四年的大学生活会给我的人生带来怎样的改变。到现在我才发现我已蹉跎了三年的光阴，在大一，大二的时候我没有找到自己喜欢并愿意全身心投入去做的事情，等到我找到的时候却发现我已没有了时间。越来越多的责任压在我的肩头，工作学业家庭这些都需要我去操心和承担。看着父母越来越多的白头发，我意识到留给我成长起来的时间已经不多了。</p>
<h2 id="活在当下">#活在当下</h2>
<p>有人说人的一生就是走向坟墓的过程，你没有办法停下来你能做的就是用有限的时间燃烧余热。天可补，海可填，南山可移，日月既往，不可复追。从现在开始我要珍惜生活中的每一分钟，尽量做好每一件事。希望往后我走的每一步都是向着自己的目标迈出的坚实的步伐。我不想当我老了会埋怨现在不努力的自己。</p>
<h2 id="向往未来">#向往未来</h2>
<p>不管怎样未来总是美好的，生活在带给你措手不及的变故的同时也在前方为你准备了香甜可口的巧克力。生活嘛还是要向前看，一直沉浸在往日的感慨唏嘘光阴流转与残酷的人，永远都不会品尝到美味的巧克力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Life is a box of chocalate, you don‘t know what you are gonna get.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;macaroon.jpg&quot; alt=&quot;马卡龙&quot;&gt;&lt;/
    
    </summary>
    
    
      <category term="闲言碎语" scheme="https://qsoblog.gq/tags/%E9%97%B2%E8%A8%80%E7%A2%8E%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>异形：契约 Alien: Covenant (2017)</title>
    <link href="https://qsoblog.gq/2017/05/03/post-3/"/>
    <id>https://qsoblog.gq/2017/05/03/post-3/</id>
    <published>2017-05-03T11:50:53.000Z</published>
    <updated>2017-06-20T12:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剧情简介">#剧情简介</h2>
<p>“科幻之父”雷德利-斯科特将为他所开创的《异形》系列带来新篇章。《异形：契约》的故事发生在《普罗米修斯》10年后，一群新的宇航员乘坐着“契约号”飞船前往遥远的星系寻找殖民地，他们来到一处看似天堂般的星球，实则是黑暗、危险的地狱，在那里他们见到了“普罗米修斯”号唯一的幸存者——由迈克尔·法斯宾德饰演的生化人大卫，一场毁灭性的巨大灾难即将到来。</p>
<h2 id="2分半序幕命運之門">#2分半序幕「命運之門」</h2>
<iframe width="854" height="480" src="https://www.youtube.com/embed/ycr4GVyEDgU?list=LL2wnB8RA3ryr8ZNZSAJem3w" frameborder="0" allowfullscreen></iframe>
<h2 id="推荐理由">#推荐理由</h2>
<p>要说2017年我最期待的电影那绝对是异形：契约。异形这个系列的电影曾经是我们童年的外星恐怖片，当然也是不可多得的好片。时隔38年正宗回归并且还能够在电影院中看到，80岁的老爷子也是不容易，值得尊敬。</p>
<p>当有人问道这部异形为什么要时隔近40年才续拍，雷德利-斯科特这样回答道这是一个值得用时间琢磨的作品，虽然这期间也拍过3，4部异形但是都忽略了一个问题他们是从哪里来的他们是怎样产生的。这部异形就是带着这样的问题一探这一切的起源地。好吧就让我们期待这部异形带给我们的惊喜吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;剧情简介&quot;&gt;#剧情简介&lt;/h2&gt;
&lt;p&gt;“科幻之父”雷德利-斯科特将为他所开创的《异形》系列带来新篇章。《异形：契约》的故事发生在《普罗米修斯》10年后，一群新的宇航员乘坐着“契约号”飞船前往遥远的星系寻找殖民地，他们来到一处看似天堂般的星球，实则是黑暗、危险的地
    
    </summary>
    
    
      <category term="电影推荐" scheme="https://qsoblog.gq/tags/%E7%94%B5%E5%BD%B1%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>[DNS] 曲线救国利器——DNS服务器</title>
    <link href="https://qsoblog.gq/2017/04/29/post-2/"/>
    <id>https://qsoblog.gq/2017/04/29/post-2/</id>
    <published>2017-04-29T05:24:21.000Z</published>
    <updated>2017-06-20T13:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前端程序员有两个必备的技能，第一个是搭建自己的博客网站，第二个就是会翻墙。<br>
搭建自己的博客网站一方面可以熟悉如何用Linux搭建和维护一个网站，另一方面又可以通过博客给自己建立一个知识库。<br>
翻墙这个技能是为了让我们能够使用google，我们都知道许多权威文档都是英文的，所以想要进步就需要翻墙查阅。</p>
</blockquote>
<h1 id="dns域名系统">DNS（域名系统）</h1>
<hr>
<p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。</p>
<h2 id="dns域名解析">DNS域名解析</h2>
<hr>
<p>首先，计算机要查找本机的缓存hosts文件，如果有web服务器的IP地址，那么直接访问web服务器。如果没有，那么查找本机所配置的DNS，向DNS服务器发送解析请求，服务器通过DNS解析后，向客户机发送域名所对应的IP地址，客户机收到IP地址，解析结束。</p>
<h2 id="dns劫持">DNS劫持</h2>
<hr>
<p>DNS缓存污染已经成了日益普遍的问题。绝大部分DNS服务器都能够将DNS查询结果在答复给发出请求的主机之前，就保存在高速缓存中。DNS高速缓存 能够极大地提高你组织内部的DNS查询性能。问题是如果你的DNS服务器的高速缓存中被大量假的DNS信息“污染”了的话，用户就有可能被送到恶意站点 而不是他们原先想要访问的网站。</p>
<h1 id="翻墙">翻墙</h1>
<hr>
<p>现在翻墙有一种方法就是将没有被GFW封的IP加入到客户端的hosts文件里，绕过GFW访问国外的网站，当然也可以屏蔽一些广告页面。那现在为什么要介绍DNS服务器呢，因为hosts文件比较容易失效，基本上是隔几天就要修改，比较麻烦。而这时DNS服务器的优势就能体现出来了。</p>
<p>DNS服务器搭建可以提供给多个客户端同时使用，当一个IP失效时只需在DNS服务器上修改而不必挨个在多个客户端上修改hosts文件，所以搭建DNS服务器相比较于修改hosts文件更友好一下。根据前面的介绍我们可以知道客户端是先访问本机的缓存hosts文件，如果hosts文件没有web服务器的IP，再访问DNS服务器，因此hosts文件有更高的优先级，如果你的客户端已经修改了hosts文件就会影响DNS服务器的使用，所以我建议用使用DNS服务器就不要修改hosts文件使用默认的hosts文件即可。</p>
<h2 id="搭建dns服务器">搭建DNS服务器</h2>
<hr>
<p>说了那么多那么如何怎样搭建DNS服务呢？我这里以ubuntu16.04为例，其他系统可以以此作为参考。因为使用在小型的家庭网络中，所以我觉得DNSmasq完全够用了</p>
<blockquote>
<p>DNSmasq是一个小巧且方便地用于配置DNS和DHCP的工具，适用于小型网络，它提供了DNS功能和可选择的DHCP功能。</p>
</blockquote>
<h3 id="安装dnsmasq">安装DNSmasq</h3>
<p>首先我们需要依次输入以下的命令来安装DNSmasq：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install dnsmasq</div></pre></td></tr></table></figure>
<h3 id="dnsmasq配置">DNSmasq配置</h3>
<p>其次我们需要在/etc里添加dnsmasq.host文件。这个文件在网上有一大堆随便搜一搜就会出来了,为了防止有些小白不知道怎么搜我就给个地址吧<a href="https://github.com/racaljk/hosts" target="_blank" rel="external">racaljk/hosts</a>记得把下载下来的hosts文件更名为dnsmasq.host</p>
<p>接下来我们需要配置一下DNSmasq，在/etc/dnsmasq.conf文件里添加一些hosts文件和DNS服务器源</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">addn-hosts=/etc/dnsmasq.host</span></div><div class="line"><span class="literal">no</span><span class="bullet">-resolv</span></div><div class="line"><span class="string">server=119.29.29.29</span></div><div class="line"><span class="string">server=202.141.162.123</span></div><div class="line"><span class="string">server=/google.com/202.141.162.123</span></div></pre></td></tr></table></figure>
<p>修改后<code>:wq!</code>保存,输入<code>service dnsmasq restart</code>DNS服务器就已经运行了。然后就是在你的客户端里修改DNS地址，将其修改为你的服务器的IP地址。</p>
<p>以下是ios修改DNS的地方，android和windows自行百度吧。</p>
<p><img src="dns.png" alt="DNS"></p>
<p>这里我要列举国内的一些DNS服务器源：</p>
<p>一、<a href="114dns.com/">114DNS</a><br>
百度家无节操的东西，最近搞广告劫持</p>
<blockquote>
<p>纯净无劫持，无需再忍受被强扭去看广告或粗俗网站之痛苦：<br>
114.114.114.114<br>
114.114.114.115<br>
拦截钓鱼病毒木马网站，增强网银、证券、购物、游戏、隐私信息安全：<br>
114.114.114.119<br>
114.114.115.119<br>
学校或家长可选，拦截色情网站，保护少年儿童免受网络色情内容的毒害:<br>
114.114.114.110<br>
114.114.115.110</p>
</blockquote>
<p>二、<a href="alidns.com/">阿里DNS</a><br>
阿里DNS是阿里巴巴集团推出的DNS递归解析系统，面向互联网用户提供快速、稳定、智能的免费DNS递归解析服务。<br>
阿里家一样流氓</p>
<blockquote>
<p>223.5.5.5<br>
223.6.6.6</p>
</blockquote>
<p>三、<a href="sdns.cn/">SDNS</a><br>
SDNS是由中国互联网络信息中心（CNNIC）与国内外电信运营商合作推出的免费公共云解析服务（SecureDNS，简称SDNS），旨在为用户提供高速、安全、智能的上网接入解析服务。</p>
<blockquote>
<p>1.2.4.8<br>
210.2.4.8</p>
</blockquote>
<p>四、[中科大的DNS]<br>
不解释，无污染、速度快。这是我觉得最好的DNS服务器源</p>
<blockquote>
<p>202.38.64.1<br>
202.112.20.131<br>
202.141.160.95<br>
202.141.160.99<br>
202.141.176.95<br>
202.141.176.99</p>
</blockquote>
<h2 id="写在最后">#写在最后</h2>
<p>当然这种方法并不能访问所有的国外网站，所以如果有能力有兴趣可以自己去搭建一个SS服务器。这里我分享一下我自己搭得SS服务器，因为这是用来给大家学习提供帮助的所以我希望大家不要用这个去下载大型文件或者去做一些违法的事情。程序员何苦难为程序员呢。</p>
<blockquote>
<p><del>服务器：153.125.234.240<br>
<del>远程端口：31836<br>
<del>本地端口：1080<br>
<del>密码：1229<br>
<del>加密方法：AES-256-CFB</del></del></del></del></del></p>
</blockquote>
<p>已失效</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前端程序员有两个必备的技能，第一个是搭建自己的博客网站，第二个就是会翻墙。&lt;br&gt;
搭建自己的博客网站一方面可以熟悉如何用Linux搭建和维护一个网站，另一方面又可以通过博客给自己建立一个知识库。&lt;br&gt;
翻墙这个技能是为了让我们能够使用googl
    
    </summary>
    
    
      <category term="DNS" scheme="https://qsoblog.gq/tags/DNS/"/>
    
      <category term="翻墙" scheme="https://qsoblog.gq/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>今天你的网站加盐了吗</title>
    <link href="https://qsoblog.gq/2017/04/14/post-1/"/>
    <id>https://qsoblog.gq/2017/04/14/post-1/</id>
    <published>2017-04-14T08:13:34.000Z</published>
    <updated>2017-06-20T13:50:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">#起因</h2>
<p>在2015年三月份的谷歌大会上Gary Illyes表示，使用HTTPS协议的站点在搜索引擎排名上较HTTP站点更具优势。换句话说HTTPS站点的搜索排名将高于HTTP站点。</p>
<p>同时最新的chrome开发版将所有的HTTP协议网站标注为不安全。</p>
<p>另外，细心的朋友可以发现国内许多知名的网站都启用了HTTPS。</p>
<p>比如：</p>
<ul>
<li>百度</li>
<li>淘宝</li>
<li>京东</li>
</ul>
<p>但是还有许多大型的网站仍然是使用的HTTP。</p>
<p>比如：</p>
<ul>
<li>58同城</li>
<li>虾米音乐</li>
<li>网易云音乐</li>
</ul>
<p>我本人最想吐槽的就是12306的订票网站，这么一个个人信息大量涌入的网站，竟然没有使用SSL加密，每次点开购票都会显示证书错误（强制使用https但是实际转到http）。这样就会把我们的个人信息暴露在非常不安全的网络环境中。</p>
<h2 id="http和https的比较">#HTTP和HTTPS的比较</h2>
<p>在介绍HTTPS的好处前我们就应该先去了解HTTP</p>
<h2 id="http介绍">##HTTP介绍</h2>
<p>HTTP就是我们平时浏览网页时候使用的一种协议。HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全。</p>
<h2 id="https介绍">##HTTPS介绍</h2>
<p>HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。<br>
HTTPS连接经常用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在 RFC 2660 中定义的安全超文本传输协议（S-HTTP）相混淆。</p>
<h2 id="https的好处">##HTTPS的好处</h2>
<ol>
<li>保障用户隐私信息安全：SSL证书让网站实现加密传输，为用户隐私信息如身份信息，家庭住址，交易记录，支付密码等设置防火墙。比如现在的淘宝，京东和苏宁等电商网站在使用SSL证书后可以有效的保障你的账户密码安全。</li>
<li>帮助用户识别钓鱼网站：SSL证书可以认证服务器真实身份，可以有效的区别钓鱼网站和官方网站。</li>
<li>利于网站SEO优化：搜索引擎如谷歌，百度站在确保用户信息安全的角度，都在大力倡导网站部署SSL证书实现https加密访问。在搜索、展现、排序方面也给予部署了SSL证书网站优待。</li>
<li>部署了SSL证书的网站会在浏览器地址栏显示https绿色安全小锁，可以提升网站的逼格。</li>
</ol>
<h2 id="为你的网站加盐吧">#为你的网站加盐吧</h2>
<p>为了提高我的网站的逼格，并且响应我大谷歌的号召，我必须跟上潮流为我的网站加盐。现在我的博客网站已经全站加密了，所以大家可以放心大胆的访问。<br>
<img src="https.png" alt="网站截图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;#起因&lt;/h2&gt;
&lt;p&gt;在2015年三月份的谷歌大会上Gary Illyes表示，使用HTTPS协议的站点在搜索引擎排名上较HTTP站点更具优势。换句话说HTTPS站点的搜索排名将高于HTTP站点。&lt;/p&gt;
&lt;p&gt;同时最新的chrome开发版将所有的HTT
    
    </summary>
    
    
      <category term="HTTPS" scheme="https://qsoblog.gq/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>About</title>
    <link href="https://qsoblog.gq/2017/04/11/about/"/>
    <id>https://qsoblog.gq/2017/04/11/about/</id>
    <published>2017-04-10T20:11:57.000Z</published>
    <updated>2017-06-20T13:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Don’t aim for success if you really want it.Just stick to what you love and believe in,and it will come naturally</p>
</blockquote>
<h2 id="傻逼似的坚持">#傻逼似的坚持</h2>
<p>每个宅男都有一个梦想，无论前路如何艰难都阻止不了我们傻逼一样的坚持，我的梦想就是建立一个自己的博客网站，闲来无事的时候可以记记笔记，写写随笔。在过去的两年里我为了建立博客网站踩过无数的坑，当然也汲取了许多的经验教训，也算是一种成长吧。</p>
<h2 id="域名的来历">#域名的来历</h2>
<p>按照我们大天朝的尿性，域名和主机的绑定是非常繁琐和困难的。根据规定如果是国内的主机与域名绑定必须到工信部备案，我本人是个学生党既没有能力去搞什么备案，也没有兴趣去瞎折腾。所以就擅自将一个域名和服务器绑定，结果很不幸我损失了一个非常喜欢的顶级域名，好气啊。不过我总算是拥有一个独立的顶级域名了。qso是我惯用的社交昵称blog就是博客的意思还是很好记的。</p>
<h2 id="订阅本博客">#订阅本博客</h2>
<p>本站增加了RSS订阅的功能，如果你对本站感兴趣，除了将本站添加进浏览器的收藏夹里你也可以订阅本站。</p>
<p>订阅方式:</p>
<ul>
<li>添加订阅源到RSS阅读器：<a href="https://qsoblog.gq/atom">https://qsoblog.gq/atom</a></li>
<li>下载&quot;即刻&quot;APP，点击关注我创建的提醒: <a href="http://m.okjike.com/topics/5915c964b675f200114b310c?username=d946312a-648f-4f6c-81e5-b786e83c3316" target="_blank" rel="external">Qso Blog更新提醒</a></li>
</ul>
<p><img src="about.png" alt="即刻"></p>
<h2 id="个人介绍">#个人介绍</h2>
<p>本人理工男，爱刷机是忠实的谷歌粉，坚决抵制ios<br>
HTML CSS JS PHP和node.js都会一点，但是都不精。</p>
<h2 id="视频加载失败说明">#视频加载失败说明</h2>
<p>如果你发现本站的某些视频无法加载，就请翻墙之后刷新页面重试，因为本站的视频都是通过嵌入youtube播放器的代码实现的。所以还请大家见谅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Don’t aim for success if you really want it.Just stick to what you love and believe in,and it will come naturally&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
    
      <category term="关于" scheme="https://qsoblog.gq/tags/%E5%85%B3%E4%BA%8E/"/>
    
  </entry>
  
</feed>
